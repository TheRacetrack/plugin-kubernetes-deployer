---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ job_k8s_namespace }}
  name: {{ resource_name }}
  labels:
    app: {{ job_k8s_namespace }}
    app.kubernetes.io/name: {{ resource_name }}
    racetrack/job: {{ resource_name }}
    racetrack/job-name: {{ manifest.name }}
    racetrack/job-version: {{ manifest.version }}
spec:
  replicas: {{ manifest.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ resource_name }}
  template:
    metadata:
      labels:
        app: {{ job_k8s_namespace }}
        app.kubernetes.io/name: {{ resource_name }}
        racetrack/job: {{ resource_name }}
        racetrack/resource: job
        racetrack/job-name: {{ manifest.name }}
        racetrack/job-version: {{ manifest.version }}
      annotations:
        racetrack-deployment-date: "{{ deployment_timestamp }}"
    spec:
      securityContext:
        supplementalGroups: [200000]
        fsGroup: 200000
        runAsUser: 100000
        runAsGroup: 100000
      imagePullSecrets:
        - name: docker-registry-read-secret
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app.kubernetes.io/name"
                      operator: In
                      values:
                        - {{ resource_name }}
                topologyKey: kubernetes.io/hostname
      containers:
{% for container_name, image_name, container_port in containers %}
        - name: {{ container_name }}
          image: "{{ image_name }}"
          imagePullPolicy: Always
          ports:
            - containerPort: {{ container_port }}
          tty: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["all"]
          resources:
            requests:
              memory: "{{ memory_min }}"
              cpu: "{{ cpu_min }}"
            limits:
              memory: "{{ memory_max }}"
              cpu: "{{ cpu_max }}"
          env:
{% for env_key, env_value in env_vars.items() %}
            - name: {{ env_key }}
              value: "{{ env_value }}"
{% endfor %}
{% for secret_key in runtime_secret_vars.keys() %}
            - name: {{ secret_key }}
              valueFrom:
                secretKeyRef:
                  name: {{ resource_name }}
                  key: secret_runtime_env.{{ secret_key }}
{% endfor %}
{% if container_port == 7000 %}
          startupProbe:
            httpGet:
              path: /live
              port: 7000
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 10
          livenessProbe:
            httpGet:
              path: /live
              port: 7000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /ready
              port: 7000
            initialDelaySeconds: 3
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 3
{% endif %}
{% endfor %}

---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ job_k8s_namespace }}
  name: {{ resource_name }}
  labels:
    app: {{ job_k8s_namespace }}
    app.kubernetes.io/name: {{ resource_name }}
    racetrack/job: {{ resource_name }}
    racetrack/job-name: {{ manifest.name }}
    racetrack/job-version: {{ manifest.version }}
spec:
  selector:
    app.kubernetes.io/name: {{ resource_name }}
  type: ClusterIP
  ports:
    - name: http
      port: 7000
      targetPort: 7000
